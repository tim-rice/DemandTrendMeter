//@version=6
indicator("QuantJazz Demand Trend Meter (QJ DTM)", overlay=false, max_lines_count=500, max_labels_count=500)

// ════════════════════════════════════════════════════════════════════════
// INPUTS  (single-line form)
// ════════════════════════════════════════════════════════════════════════
// Price MACD
maType    = input.string("EMA", title="Price MA Type", options=["SMA","EMA","WMA","HMA","DEMA","TEMA","RMA"], tooltip="Moving-average type used to build the price MACD (fast & slow).", group="Price MACD")
fastLen   = input.int(8,  minval=1, title="Fast MA Length", group="Price MACD")
slowLen   = input.int(21, minval=1, title="Slow MA Length", group="Price MACD")
signalLen = input.int(5,  minval=1, title="Signal (EMA) Length", group="Price MACD")

// Volume MACD
volFastLen = input.int(8,  minval=1, title="Fast Volume MA", group="Volume MACD")
volSlowLen = input.int(50, minval=1, title="Slow Volume MA", group="Volume MACD")
lockScales = input.bool(true, title="Lock Volume MACD to MACD Scale", tooltip="Match dispersion of vol-MACD to price-MACD for shared Y scale.", group="Volume MACD")
lockLen    = input.int(200, minval=50, title="Scale Sync Lookback", group="Volume MACD")
showVolDebugBars = input.bool(false, title="Show Signed Volume bars (debug)", group="Volume MACD")
showVolDebugMACD = input.bool(false, title="Show Directional Volume MACD (debug)", group="Volume MACD")
histScaleMode = input.string("Z-score (auto)", title="Histogram Scale Mode", options=["Z-score (auto)","Lock to MACD (stdev)","Fixed ×K"], tooltip="Scale the green/magenta vol histogram so it’s not flat.", group="Volume MACD")
histFixedK = input.float(1.5, minval=0.1, step=0.1, title="Fixed ×K (only for Fixed mode)", group="Volume MACD")

// Thrust Oscillator
thrustLen     = input.int(100, title="Thrust Normalization Length", group="Thrust")
weightPrice   = input.float(0.50, minval=0, maxval=1, step=0.05, title="Weight - Price MACD", group="Thrust")
weightVol     = input.float(0.35, minval=0, maxval=1, step=0.05, title="Weight - Volume MACD", group="Thrust")
weightPVT     = input.float(0.15, minval=0, maxval=1, step=0.05, title="Weight - PVT", group="Thrust")
showThrust    = input.bool(true, title="Show Thrust Oscillator", group="Thrust")
earlyLevel    = input.float(20, title="Level: Early", group="Thrust")
confirmLevel  = input.float(40, title="Level: Confirm", group="Thrust")
strongLevel   = input.float(65, title="Level: Strong", group="Thrust")
compressionLv = input.float(10, title="Compression band (±)", group="Thrust")
fadeStrongLvl = input.float(80, title="Cloud Fade-in Threshold", tooltip="Start green glow under thrust once thrust ≥ this level.", group="Thrust")

// PVT
showPVT       = input.bool(true, title="Show PVT dots", group="PVT")
pvtSignalLen  = input.int(21, title="PVT Signal Length", group="PVT")
pvtSignalType = input.string("SMA", title="PVT Signal Type", options=["SMA","EMA"], group="PVT")

// Trend Quality
showTQ   = input.bool(true, title="Show Trend Quality Dot", group="Trend Quality")
tqLen    = input.int(50, title="Trend Quality Length", group="Trend Quality")
tqHi     = input.float(1.10, title="TQ High (Absolute)", group="Trend Quality")
tqLo     = input.float(0.90, title="TQ Low (Absolute)", group="Trend Quality")
tqMode   = input.string("ZScore", title="TQ Mode", options=["Absolute","ZScore"], group="Trend Quality")
tqZHi    = input.float(0.50, title="TQ Z-High", group="Trend Quality")
tqZLo    = input.float(-0.50, title="TQ Z-Low", group="Trend Quality")

// Stoch RSI
showStoch        = input.bool(true, title="Show Stoch RSI markers", group="Stoch RSI")
lenRSI           = input.int(36, minval=2, maxval=300, title="Length RSI", group="Stoch RSI")
lenStoch         = input.int(36, minval=2, maxval=300, title="Length Stoch", group="Stoch RSI")
smoothK          = input.int(7,  minval=1, maxval=100, title="Smooth K", group="Stoch RSI")
smoothD          = input.int(7,  minval=1, maxval=100, title="Smooth D", group="Stoch RSI")
useStochInThrust = input.bool(false, title="Blend Stoch into Thrust (adds 0.10 weight)", group="Stoch RSI")

// Display
showTraffic = input.bool(true, title="Show Traffic Lights", group="Display")
lightsAbove = input.bool(true, title="Place lights above oscillator", group="Display")
neutralZ    = input.float(0.25, step=0.05, title="Neutral z-band", group="Display")
glowAllGreen= input.bool(true, title="Background Glow on ALL-GREEN", group="Display")

// Signals row (squares)
signalMode = input.string("All 3 lights", title="Buy Trigger Logic", options=["All 3 lights","All 4 lights","3 lights + Thrust Confirm","All 4 + Thrust Confirm + Vol>0","MA Ribbon Breakout + MTF Surge"], tooltip="What must align to print BUY square on top row.", group="Signals")
showSignalRow = input.bool(true, title="Show Signals Row (squares)", tooltip="Squares on a dedicated top row so they never overlap stoplights.", group="Signals")

// HUD
useHUD = input.bool(true, title="Show HUD", group="HUD")
hudAnchor = input.string("Top-Right", title="HUD Anchor", options=["Top-Right","Top-Left","Above Last Bar","Right of Last (n bars)"], group="HUD")
hudRightBars = input.int(2, minval=0, maxval=50, title="Bars Right of Last (if chosen)", group="HUD")
hudTextSize  = input.string("Normal", title="HUD Text Size", options=["Tiny","Small","Normal","Large"], group="HUD")
hudOpacity   = input.int(0, minval=0, maxval=90, title="HUD Fill Opacity (0–90)", group="HUD")

// MTF Volume Surge (RVOL) for scanners / VATE blasts
useMTFsurge = input.bool(true, title="Use MTF RVOL Surge", group="MTF Surge")
tf1 = input.string("3",   title="TF1 (e.g. 3)", group="MTF Surge")
tf2 = input.string("15",  title="TF2 (e.g. 15)", group="MTF Surge")
tf3 = input.string("60",  title="TF3 (e.g. 60)", group="MTF Surge")
rvolLen = input.int(30, minval=1, title="RVOL Lookback", group="MTF Surge")
rvolGate = input.float(3.0, minval=0.1, step=0.1, title="RVOL Threshold (x)", group="MTF Surge")

// MA Ribbon Breakout detector
useMAbreak = input.bool(true, title="Use MA Ribbon Breakout", group="MA Ribbon")
lenMA20 = input.int(20, minval=1, title="MA Fast (20)", group="MA Ribbon")
lenMA50 = input.int(50, minval=1, title="MA Mid (50)", group="MA Ribbon")
lenMA200= input.int(200, minval=1, title="MA Slow (200)", group="MA Ribbon")

// ════════════════════════════════════════════════════════════════════════
// HELPERS
// ════════════════════════════════════════════════════════════════════════
tanh_b(x)=> 
    xx = math.min(math.max(x, -50.0), 50.0)
    e2 = math.exp(-2.0*xx)
    (1-e2)/(1+e2)

lerp(a,b,t)=> a + (b-a)*t

gradColor(v)=>
    t = math.min(math.max((v + 100.0) / 200.0, 0.0), 1.0)
    r1=170.0, g1=20.0,  b1=20.0
    r2=255.0, g2=210.0, b2=0.0
    r3=0.0,   g3=150.0, b3=0.0
    r=0.0, g=0.0, b=0.0
    if t<=0.5
        tt=t/0.5
        r:=lerp(r1,r2,tt), g:=lerp(g1,g2,tt), b:=lerp(b1,b2,tt)
    else
        tt=(t-0.5)/0.5
        r:=lerp(r2,r3,tt), g:=lerp(g2,g3,tt), b:=lerp(b2,b3,tt)
    color.rgb(int(r),int(g),int(b))

sizeFromStr(s)=> s=="Tiny"?size.tiny:s=="Small"?size.small:s=="Normal"?size.normal:size.large

get_ma(src, len)=>
    l=math.max(len,1)
    if maType=="SMA"
        ta.sma(src,l)
    else if maType=="EMA"
        ta.ema(src,l)
    else if maType=="WMA"
        ta.wma(src,l)
    else if maType=="HMA"
        w1=ta.wma(src, math.max(int(l/2),1))
        w2=ta.wma(src, l)
        ta.wma(2*w1 - w2, math.max(int(math.round(math.sqrt(l))),1))
    else if maType=="DEMA"
        e1=ta.ema(src,l)
        2*e1 - ta.ema(e1,l)
    else if maType=="TEMA"
        e1=ta.ema(src,l)
        e2=ta.ema(e1,l)
        e3=ta.ema(e2,l)
        3*e1 - 3*e2 + e3
    else
        ta.rma(src,l)

// ════════════════════════════════════════════════════════════════════════
// PRICE MACD
// ════════════════════════════════════════════════════════════════════════
fastMA     = get_ma(close, fastLen)
slowMA     = get_ma(close, slowLen)
macd       = fastMA - slowMA
macdSignal = ta.ema(macd, signalLen)
hist       = macd - macdSignal
plot(hist, title="MACD Histogram", style=plot.style_columns, color=hist>=0?color.new(color.lime,0):color.new(color.red,0))
hline(0, "Zero", color=color.gray)

// ════════════════════════════════════════════════════════════════════════
// DIRECTIONAL VOLUME MACD (signed) + scaling + visible histogram
// ════════════════════════════════════════════════════════════════════════
priceChg  = close - nz(close[1], close)
signedVol = volume * math.sign(priceChg)
volFastDir= ta.ema(signedVol, volFastLen)
volSlowDir= ta.ema(signedVol, volSlowLen)
volMACDdir= volFastDir - volSlowDir

sdMacd = ta.stdev(macd, lockLen)
sdVol  = ta.stdev(volMACDdir, lockLen)
scaleF = sdVol!=0.0 ? sdMacd/sdVol : 1.0
volMACD_sync = lockScales ? volMACDdir*scaleF : volMACDdir

sdSV = ta.stdev(signedVol, lockLen)
svScaleF = sdSV!=0.0 ? sdMacd/sdSV : 1.0
volSigned_sync = lockScales ? signedVol*svScaleF : signedVol
plot(showVolDebugBars?volSigned_sync:na, title="Signed Volume (scaled)", style=plot.style_columns, color=volSigned_sync>=0?color.new(color.lime,20):color.new(color.red,20))
plot(showVolDebugMACD?volMACD_sync:na, title="Dir Volume MACD (scaled)", color=volMACD_sync>=0?color.lime:color.fuchsia, linewidth=2)

volHistSeries = histScaleMode=="Z-score (auto)" ? (volMACD_sync/math.max(ta.stdev(volMACD_sync,lockLen),1e-10))*25.0 :
              histScaleMode=="Lock to MACD (stdev)" ? volMACD_sync :
              volMACDdir*histFixedK
plot(volHistSeries, title="Volume MACD Histogram", style=plot.style_columns, color=volHistSeries>=0?color.new(color.lime,20):color.new(color.fuchsia,20))

// ════════════════════════════════════════════════════════════════════════
// PVT
// ════════════════════════════════════════════════════════════════════════
pvt = ta.cum(((close - nz(close[1], close))/nz(close[1], close))*volume)
pvtSignal = pvtSignalType=="EMA" ? ta.ema(pvt, pvtSignalLen) : ta.sma(pvt, pvtSignalLen)
pvtDelta = pvt - pvtSignal
pvtXUp = ta.crossover(pvt, pvtSignal)
pvtXDn = ta.crossunder(pvt, pvtSignal)
plotshape(showPVT and pvtXUp, title="PVT Buy", style=shape.triangleup, size=size.tiny, color=color.lime, location=location.bottom)
plotshape(showPVT and pvtXDn, title="PVT Sell", style=shape.triangledown, size=size.tiny, color=color.red, location=location.top)

// ════════════════════════════════════════════════════════════════════════
// STOCH RSI
// ════════════════════════════════════════════════════════════════════════
rsiVal   = ta.rsi(close, lenRSI)
rsiMin   = ta.lowest(rsiVal, lenStoch)
rsiMax   = ta.highest(rsiVal, lenStoch)
stochRSI = (rsiVal - rsiMin) / math.max(rsiMax - rsiMin, 1e-10) * 100.0
k = ta.sma(stochRSI, smoothK)
d = ta.sma(k, smoothD)
stochXUp = ta.crossover(k, d)
stochXDn = ta.crossunder(k, d)
plotshape(showStoch and stochXUp and k<20,  title="StochRSI Buy",  style=shape.triangleup,   size=size.tiny, color=color.lime, location=location.bottom)
plotshape(showStoch and stochXDn and k>80, title="StochRSI Sell", style=shape.triangledown, size=size.tiny, color=color.red,  location=location.top)

// ════════════════════════════════════════════════════════════════════════
//– TREND QUALITY (ER × Expansion)
// ════════════════════════════════════════════════════════════════════════
chg = math.abs(close - nz(close[1], close))
cumChg = ta.cum(chg)
sumChg = cumChg - nz(cumChg[tqLen], 0)
er = math.abs(close - nz(close[tqLen], close)) / math.max(sumChg, 1e-10)
atrp = ta.atr(tqLen) / math.max(close, 1e-10)
atrpBase = ta.ema(atrp, tqLen)
expansion = atrp / math.max(atrpBase, 1e-10)
tq = er*expansion

tqBase = ta.ema(tq, tqLen)
tqDev = ta.stdev(tq, tqLen)
tqZ = (tq - tqBase) / math.max(tqDev, 1e-10)

tqGreen = tqMode=="Absolute" ? (tq>tqHi) : (tqZ>tqZHi)
tqRed   = tqMode=="Absolute" ? (tq<tqLo) : (tqZ<tqZLo)
tqCol = tqGreen?color.lime:tqRed?color.red:color.yellow

// ════════════════════════════════════════════════════════════════════════
// THRUST OSCILLATOR (bounded) + fade-in cloud
// ════════════════════════════════════════════════════════════════════════
zPrice = hist         / math.max(ta.stdev(hist,         thrustLen), 1e-10)
zVol   = volMACD_sync / math.max(ta.stdev(volMACD_sync, thrustLen), 1e-10)
zPVT   = pvtDelta     / math.max(ta.stdev(pvtDelta,     thrustLen), 1e-10)
zStoch = (k - 50.0) / 50.0
extra  = useStochInThrust ? 0.10*zStoch : 0.0
thrustRaw = weightPrice*zPrice + weightVol*zVol + weightPVT*zPVT + extra
thrust    = 100.0*tanh_b(thrustRaw)

bgcol = showThrust and math.abs(thrust)<compressionLv ? color.new(color.gray, 90) : na
bgcolor(bgcol, title="Compression Zone")

plotTh = plot(showThrust?thrust:na, title="Thrust (bounded)", color=gradColor(thrust), linewidth=3)
baseZero = plot(0, display=display.none)
alphaCloud = thrust>fadeStrongLvl ? 85 - int(math.min(math.max(thrust - fadeStrongLvl, 0), 20)*3.5) : 100
fill(plotTh, baseZero, color=thrust>fadeStrongLvl?color.new(color.lime, alphaCloud):na, title="Strong Thrust Cloud")

hline( earlyLevel, "Early",   color=color.new(color.silver,60))
hline(-earlyLevel, "",        color=color.new(color.silver,60))
hline( confirmLevel,"Confirm",color=color.new(color.silver,40))
hline(-confirmLevel,"",       color=color.new(color.silver,40))
hline( strongLevel, "Strong", color=color.new(color.silver,20))
hline(-strongLevel,"",        color=color.new(color.silver,20))

// ════════════════════════════════════════════════════════════════════════
// TRAFFIC-LIGHT DOTS + SIGNALS ROW (SQUARES)
// ════════════════════════════════════════════════════════════════════════
side = lightsAbove?1.0:-1.0
rowSig   = 104.0*side
rowPrice = 95.0*side
rowVol   = 85.0*side
rowPVT   = 75.0*side
rowTQ    = 65.0*side

priceCol = zPrice> neutralZ ? color.lime : zPrice<-neutralZ ? color.red : color.yellow
volCol   = zVol  > neutralZ ? color.lime : zVol  <-neutralZ ? color.red : color.yellow
pvtCol   = zPVT  > neutralZ ? color.lime : zPVT <-neutralZ ? color.red : color.yellow

plot(showTraffic?rowPrice:na, title="Price Dot", style=plot.style_circles, color=priceCol, linewidth=3)
plot(showTraffic?rowVol  :na, title="Volume Dot",style=plot.style_circles, color=volCol,   linewidth=3)
plot(showTraffic?rowPVT  :na, title="PVT Dot",   style=plot.style_circles, color=pvtCol,   linewidth=3)
plot(showTraffic?rowTQ   :na, title="TQ Dot",    style=plot.style_circles, color=tqCol,    linewidth=3)

all3  = priceCol==color.lime and volCol==color.lime and pvtCol==color.lime
all4  = all3 and (tqCol==color.lime)
volPos= volMACD_sync>0
thOK  = thrust>confirmLevel

// MA Ribbon Breakout + 200 regime
ma20 = ta.ema(close, lenMA20)
ma50 = ta.ema(close, lenMA50)
ma200= ta.sma(close, lenMA200)
breakUp = ta.crossover(ma20, ma50)
above200= close>ma200
maRibbonOK = useMAbreak and breakUp and above200

// MTF RVOL surge
rvol(srcTF)=>
    vTF = request.security(syminfo.tickerid, srcTF, volume)
    avgTF = request.security(syminfo.tickerid, srcTF, ta.sma(volume, rvolLen))
    vTF/math.max(avgTF,1)

// Note: RVOL using volume from TF contexts (approx)
rv1 = useMTFsurge ? rvol(tf1) : na
rv2 = useMTFsurge ? rvol(tf2) : na
rv3 = useMTFsurge ? rvol(tf3) : na
mtfPass = useMTFsurge ? (nz(rv1,0)>=rvolGate and nz(rv2,0)>=rvolGate and nz(rv3,0)>=rvolGate) : true

buyNow =
  signalMode=="All 3 lights" ? all3 :
  signalMode=="All 4 lights" ? all4 :
  signalMode=="3 lights + Thrust Confirm" ? (all3 and thOK) :
  signalMode=="All 4 + Thrust Confirm + Vol>0" ? (all4 and thOK and volPos) :
  (maRibbonOK and mtfPass)

// Falling edge of buyNow (true -> false), or strong bearish thrust with red price light
sellEdge = buyNow[1] and not buyNow
sellNow  = sellEdge or (thrust < -confirmLevel and priceCol == color.red)

plotshape(showSignalRow and buyNow ? rowSig : na, title="BUY",  style=shape.square, size=size.tiny, color=color.lime, location=location.absolute)
plotshape(showSignalRow and sellNow? rowSig : na, title="SELL", style=shape.square, size=size.tiny, color=color.red,  location=location.absolute)

// Chart glow when fully aligned
bgcolor(glowAllGreen and all4?color.new(color.lime, 92):na, title="ALL-GREEN Glow")

// ════════════════════════════════════════════════════════════════════════
//* HUD */
// ════════════════════════════════════════════════════════════════════════
var label hud = na
spellLight(c)=>
    c==color.lime?"GREEN":c==color.red?"RED":"YELLOW"

hudTxt =
 "HUD — QJ Demand Trend\n"+
 "Price: "+spellLight(priceCol)+"  Vol: "+spellLight(volCol)+"  PVT: "+spellLight(pvtCol)+"  TQ: "+spellLight(tqCol)+"\n"+
 "Thrust: "+str.tostring(thrust, format.mintick)+
 (useMTFsurge?("  | RVOL "+tf1+":"+str.tostring(rv1, format.mintick)+" ×, "+tf2+":"+str.tostring(rv2, format.mintick)+" ×, "+tf3+":"+str.tostring(rv3, format.mintick)+" ×"):"")

hudBg = color.new(gradColor(thrust), hudOpacity)
hudX = hudAnchor=="Top-Left"?bar_index-100:hudAnchor=="Top-Right"?bar_index:hudAnchor=="Above Last Bar"?bar_index+1:bar_index+hudRightBars
hudY = hudAnchor=="Above Last Bar"?90:100

if useHUD and barstate.islast
    if na(hud)
        hud := label.new(hudX, hudY, hudTxt, xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_right, textcolor=color.white, color=hudBg, size=sizeFromStr(hudTextSize))
    else
        label.set_x(hud, hudX), label.set_y(hud, hudY), label.set_text(hud, hudTxt), label.set_textcolor(hud, color.white), label.set_color(hud, hudBg), label.set_style(hud, label.style_label_right), label.set_size(hud, sizeFromStr(hudTextSize))
else
    if not na(hud)
        label.delete(hud), hud:=na


